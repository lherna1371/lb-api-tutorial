{"mappings":"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","sources":["node_modules/rickmortyapi/src/index.ts","node_modules/rickmortyapi/src/utils/generateQueryString.ts","node_modules/rickmortyapi/src/utils/get.ts","node_modules/rickmortyapi/src/utils/getResource.ts","node_modules/rickmortyapi/src/character/index.ts","node_modules/rickmortyapi/src/location/index.ts","node_modules/rickmortyapi/src/episode/index.ts","node_modules/rickmortyapi/src/endpoints/index.ts","src/app.js"],"sourcesContent":["export { getCharacters, getCharacter } from './character'\nexport { getLocations, getLocation } from './location'\nexport { getEpisodes, getEpisode } from './episode'\nexport { getEndpoints } from './endpoints'\nexport * from './interfaces';\n","import { GetResource } from './getResource'\n\nexport const errorMessage = {\n  required: 'You are using an invalid argument. As an argument use an integer (Id) or an array of integers (Ids).',\n  optional: 'You are using an invalid argument. As an argument use a filter object or leave it blank.',\n}\n\nconst isInteger = (val: unknown) => typeof val === 'number' && Number.isInteger(val)\n\nexport const isArrayOfIntegers = (val: unknown): boolean => Array.isArray(val) && val.every(isInteger)\n\nconst generateQueryString = (query: GetResource['options'], isIdRequired?: boolean): string => {\n  if (isIdRequired && isInteger(query)) {\n    return `/${query}`\n  }\n\n  if (isIdRequired && isArrayOfIntegers(query)) {\n    const arrayOfIds = query as number[]\n\n    /**\n     * [0] forces the API to return an empty array.\n     * This should be addressed in the next API codebase update.\n     */\n    return `/${arrayOfIds.length ? arrayOfIds : '[0]'}`\n  }\n\n  if (!isIdRequired && typeof query === 'object' && !Array.isArray(query)) {\n    const params = new URLSearchParams(query as Record<string, string>).toString()\n    return `/?${params}`\n  }\n\n  throw new Error(errorMessage[isIdRequired ? 'required' : 'optional'])\n}\n\nexport default generateQueryString\n","const get = async (endpoint: string): Promise<{ data: unknown; status: number; statusMessage: string }> => {\n  const res = await fetch(`https://rickandmortyapi.com/api/${endpoint}`)\n\n  // response.status >= 200 && response.status < 300\n  if (res.ok) {\n    const data = await res.json()\n\n    return {\n      data,\n      status: res.status,\n      statusMessage: res.statusText,\n    }\n  }\n\n  return {\n    data: {},\n    status: res.status,\n    statusMessage: res.statusText,\n  }\n}\n\nexport default get\n","import { CharacterFilter, EpisodeFilter, LocationFilter } from '../interfaces'\nimport generateQueryString from './generateQueryString'\nimport get from './get'\n\nexport interface GetResource {\n  endpoint: 'character' | 'location' | 'episode' | ''\n  options: number | number[] | CharacterFilter | LocationFilter | EpisodeFilter\n  isIdRequired?: boolean\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getResource = async ({ endpoint, options, isIdRequired = false }: GetResource): Promise<any> => {\n  const qs = generateQueryString(options, isIdRequired)\n\n  return get(`${endpoint}/${qs}`)\n}\n\nexport default getResource\n","import { ApiResponse, Character, CharacterFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'character'\n\n/**\n * Gets a collection of Characters.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacters = (filters?: CharacterFilter): Promise<ApiResponse<Info<Character[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Character by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacter = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Character : Character[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n","import { ApiResponse, Info, Location, LocationFilter } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'location'\n\n/**\n * Gets a collection of Locations.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocations = (filters?: LocationFilter): Promise<ApiResponse<Info<Location[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Location by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocation = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Location : Location[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n","import { ApiResponse, Episode, EpisodeFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'episode'\n\n/**\n * Gets a collection of Episodes.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisodes = (filters?: EpisodeFilter): Promise<ApiResponse<Info<Episode[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets an Episode by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisode = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Episode : Episode[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n","import { ApiResponse, Endpoints } from '../interfaces'\nimport getResource from '../utils/getResource'\n\n/**\n * Gets a list of available resources.<br/>\n * https://rickandmortyapi.com/documentation/#rest\n */\nexport const getEndpoints = (): Promise<ApiResponse<Endpoints>> => getResource({ endpoint: '', options: {} })\n","import { getCharacter } from 'rickmortyapi'\r\n\r\nlet aliveCounter = 0;\r\nlet deadCounter = 0;\r\n\r\n\r\ndocument.querySelector('button').addEventListener('click', function(){\r\n    callAPI(); \r\n})\r\n\r\n\r\nasync function callAPI() {\r\n    // 826 characters we can use in the API\r\n    let characterID = Math.ceil(Math.random() * 826);\r\n    let characterData = await getCharacter(characterID);\r\n\r\n    console.log(characterData);\r\n\r\n    let name = characterData.data.name; \r\n    let image = characterData.data.image;\r\n    let status = characterData.data.status; // dead/alive \r\n\r\n    document.querySelector('img').src = image;\r\n    document.querySelector('.character-status').textContent = name;\r\n\r\n    if (status === 'Alive') {\r\n        aliveCounter++;\r\n        document.querySelector('#alive-count').textContent = aliveCounter;\r\n    } else if (status === 'Dead') {\r\n        deadCounter++; \r\n        document.querySelector('#dead-count').textContent = deadCounter;\r\n    } else {\r\n        console.log('Character Status is Unkown!!!')\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":["e","$de96c3d5f9e70e05$var$i","Object","defineProperty","$de96c3d5f9e70e05$var$A","getOwnPropertyDescriptor","$de96c3d5f9e70e05$var$E","getOwnPropertyNames","$de96c3d5f9e70e05$var$I","prototype","hasOwnProperty","src_exports","t","o","get","enumerable","__export","getCharacter","getCharacters","getEndpoints","getEpisode","getEpisodes","getLocation","getLocations","$de96c3d5f9e70e05$exports","n","s","call","$de96c3d5f9e70e05$var$C","value","errorMessage","required","optional","isInteger","val","Number","generateQueryString_default","query","isIdRequired","Array","isArray","every","isArrayOfIntegers","arrayOfIds","length","URLSearchParams","toString","Error","get_default","async","endpoint","res","fetch","ok","data","json","status","statusMessage","statusText","getResource_default","options","qs","filters","id","$e73bf42412feb220$var$aliveCounter","$e73bf42412feb220$var$deadCounter","document","querySelector","addEventListener","characterID","Math","ceil","random","characterData","console","log","name","image","src","textContent","$e73bf42412feb220$var$callAPI"],"version":3,"file":"index.2771a020.js.map"}